# This Cloud Formation template is used for runtime infrastructure
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DeployBucketName:
    Type: String
    Description: The deploy bucket name.
  LambdaKey:
    Type: String
    Description: The key of the lambda package in the deploy bucket.
  AcmCertificateArn:
    Type: String
    Description: The ARN of the ACM certificate to use for the Cloudfront Distribution.
Resources:
  WebResourcesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: code-and-coffee-service-web-resources
  WebResourcesBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: code-and-coffee-service-web-resources
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Allow Public access to web resources"
            Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: arn:aws:s3:::code-and-coffee-service-web-resources/*
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref DeployBucketName
        S3Key: !Ref LambdaKey
      Handler: lambda-package/index.handler
      MemorySize: 128
      Role: arn:aws:iam::848023796141:role/code-and-coffee-service-lambda-role
      Runtime: nodejs14.x
      Timeout: 10
  ApiGatewayHttpApi:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: MyHttpApi
      ProtocolType: HTTP
      Description: An HTTP API for my Lambda function
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
  ApiGatewayHttpApiIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref ApiGatewayHttpApi
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
    DependsOn:
      - ApiGatewayHttpApi
      - LambdaFunction
  ApiGatewayHttpApiRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref ApiGatewayHttpApi
      RouteKey: "$default"
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayHttpApiIntegration
    DependsOn:
      - ApiGatewayHttpApiIntegration
      - ApiGatewayHttpApi
  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: Code and Coffee Service
        Origins:
          - DomainName: !Sub "${ApiGatewayHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
            Id: api-gateway
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
          - Id: s3-origin
            DomainName: !GetAtt WebResourcesBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-origin
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        CacheBehaviors:
          - PathPattern: /api/*
            TargetOriginId: api-gateway
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            MinTTL: 300
            MaxTTL: 360
    DependsOn:
      - ApiGatewayHttpApi
